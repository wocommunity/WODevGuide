{
    attributes = (
        {
            columnName = FIRST_NAME; 
            externalType = char; 
            name = firstName; 
            valueClassName = NSString; 
            width = 20; 
        }, 
        {
            columnName = LAST_NAME; 
            externalType = char; 
            name = lastName; 
            valueClassName = NSString; 
            width = 30; 
        }, 
        {
            columnName = TALENT_ID; 
            externalType = long; 
            name = talentID; 
            precision = 9; 
            valueClassName = NSNumber; 
            valueType = i; 
        }
    ); 
    attributesUsedForLocking = (talentID, firstName, lastName); 
    className = webobjectsexamples.businesslogic.movies.common.Talent; 
    classProperties = (firstName, lastName, roles, moviesDirected, photo); 
    externalName = TALENT; 
    fetchSpecificationDictionary = {}; 
    internalInfo = {
        _clientClassPropertyNames = (firstName, lastName, roles, moviesDirected, photo); 
        _javaClientClassName = webobjectsexamples.businesslogic.movies.common.Talent; 
    }; 
    maxNumberOfInstancesToBatchFetch = 10; 
    name = Talent; 
    primaryKeyAttributes = (talentID); 
    relationships = (
        {
            definition = toDirector.toMovie; 
            joinSemantic = EOInnerJoin; 
            name = moviesDirected; 
        }, 
        {
            deleteRule = EODeleteRuleCascade; 
            destination = TalentPhoto; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = talentID; sourceAttribute = talentID; }); 
            name = photo; 
            ownsDestination = Y; 
            propagatesPrimaryKey = Y; 
        }, 
        {
            deleteRule = EODeleteRuleDeny; 
            destination = MovieRole; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = talentID; sourceAttribute = talentID; }); 
            name = roles; 
            numberOfToManyFaultsToBatchFetch = 20; 
            propagatesPrimaryKey = Y; 
        }, 
        {
            deleteRule = EODeleteRuleDeny; 
            destination = Director; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = talentID; sourceAttribute = talentID; }); 
            name = toDirector; 
            numberOfToManyFaultsToBatchFetch = 20; 
            propagatesPrimaryKey = Y; 
        }
    ); 
}
